; For the keyboard configuration sections, use the key names in the "Key Name" column on this page: https://wiki.libsdl.org/SDL_Keycode
; You can also add key modifiers, like left or right shift, like this:
;BUTTON_START = Left Shift And Return
; You can use multiple modifiers, too. Just separate the modifers and key name with "and":
;BUTTON_START = Left Shift And Left Ctrl And Return
; You can also use modifiers without "left" or "right", in which case both left and right shift will work as a shift input:
;BUTTON_START = Shift And Return
; If you happen to have both "left shift" and "right shift", pressing one or
; both shifts will work, just as if plain "shift" were used, with no "left" or
; "right".
;BUTTON_START = Left Shift And Right Shift And Return
; Modifier keys on their own, or combined with other modifiers, with no
; non-modifier key, will be considered a valid input if only the modifiers for
; the input are pressed, and no other modifiers.
;BUTTON_START = Left Shift And Left Ctrl
; Valid modifiers:
; Shift
; Ctrl
; Alt
; GUI
; The "GUI" modifier corresponds to the "Windows" key or the macOS "Command" key.
[INPUT_BUTTONS1P_KEYBOARD]
BUTTON_START = Return
BUTTON_3 = ;
BUTTON_2 = L
BUTTON_1 = K
BUTTON_LEFT = A
BUTTON_RIGHT = D
BUTTON_DOWN = S
BUTTON_UP = W

[INPUT_BUTTONS2P_KEYBOARD]
BUTTON_START = Keypad Enter
BUTTON_3 = Keypad 3
BUTTON_2 = Keypad 2
BUTTON_1 = Keypad 1
BUTTON_LEFT = Keypad 4
BUTTON_RIGHT = Keypad 6
BUTTON_DOWN = Keypad 5
BUTTON_UP = Keypad 8

[INPUT_SERVICE_KEYBOARD]
SERVICE_COIN1 = Right Shift
SERVICE_COIN2 = Keypad +
SERVICE_ADDSERVICE = Tab
; Currently, the test button just restarts the game. Eventually, a full menu will be provided, with a reset option.
SERVICE_TEST = F2
SERVICE_TILT = Backspace

[INPUT_APPLICATION_KEYBOARD]
QUIT = Escape

[INPUT_JOYSTICK1P]
DEVICE_INDEX = 0
;DEVICE_NAME = REAL ARCADE PRO.3

;[INPUT_JOYSTICK2P]
;DEVICE_INDEX = 1
;DEVICE_NAME = ...

; The initial "1P" selects player 1's joystick device; use "2P" for player 2's.
[INPUT_BUTTONS1P_JOYSTICK]
BUTTON_START = 1P Button 9
BUTTON_3 = 1P Button 5
BUTTON_2 = 1P Button 3
BUTTON_1 = 1P Button 0
;BUTTON_LEFT = 1P Axis 0 -50%
;BUTTON_RIGHT = 1P Axis 0 +50%
;BUTTON_DOWN = 1P Axis 1 +50%
;BUTTON_UP = 1P Axis 1 -50%
BUTTON_LEFT = 1P Hat 0 Left
BUTTON_RIGHT = 1P Hat 0 Right
BUTTON_DOWN = 1P Hat 0 Down
BUTTON_UP = 1P Hat 0 Up
; Diagonals are also supported, if you need them for some reason. Use "Rightup", "Rightdown", "Leftup", or "Leftdown".
;BUTTON_LEFT = 1P Hat 0 Leftdown

[INPUT_SERVICE_JOYSTICK]
SERVICE_COIN1 = 1P Button 8
;SERVICE_COIN2 = 2P Button ...
SERVICE_TEST = 1P Button 12

[VIDEO]
; If DISPLAY_MODE is unspecified, or the specification is invalid, the default is Window 320x240.

; Window defaults to 320x240 if no resolution is specified.
;DISPLAY_MODE = Window
; The startup window resolution can be specified.
;DISPLAY_MODE = Window 640x480
; If resolution isn't specified for Fullscreen Exclusive, desktop resolution is used.
;DISPLAY_MODE = Fullscreen Exclusive
; The resolution for Fullscreen Exclusive can be specified.
;DISPLAY_MODE = Fullscreen Exclusive 320x240
; And, of course, Fullscreen Desktop is supported; it makes the display a desktop resolution borderless window, taking up the whole screen.
; This mode works better on some systems, such as possibly having less lag than Fullscreen Exclusive.
; As of SDL version 2.0.14, the game will stay on screen if you select another application while using this display mode.
;DISPLAY_MODE = Fullscreen Desktop

; Use 0 to disable or a nonzero integer to enable vsync. If unspecified, the default is disabled.
;VSYNC = 0

; Use 0 to disable or a nonzero integer to enable updating at vsync rate. Enabling this option also automatically enables vsync. If unspecified, the default is disabled.
; Forces the game to update at your monitor's currently set refresh rate. Can give smoother performance, such as for continuously scrolling graphics.
; Unless your monitor resolution is set around 61.68Hz, this will give inaccurate frame timing.
; Still, if you set your monitor to around 60Hz, the game will play just fine, though records set shouldn't be considered valid for leaderboards that include PCB scores.
;VSYNC_UPDATE_RATE = 0

; Your debug mode setting here won't be saved to save data. Other game settings
; save to your save data, and will remain set if you remove them from this INI.

[AUDIO]
; Default is for audio to not be muted.
;MUTED = 0

; Mono is the default, and how the original outputs audio.
; With stereo, the left speaker will output just sound effects and the right speaker just music.
;MIXING = Mono
;MIXING = Stereo

; By default, both left and right speakers are output. But, it just so happens
; the game internally has all sound effects on the left speaker and music on
; the right speaker, so you can choose whether to have just sound effects
; (SPEAKERS = Left) or just music (SPEAKERS = Right). With "MIXING = Mono",
; whatever setting chosen for SPEAKERS outputs mono, but with "MIXING = Stereo"
; the setting "SPEAKERS = Left" will output only the sound effects on the left
; speaker, and "SPEAKERS = Right" would output only the music on the right
; speaker.
;SPEAKERS = Both
;SPEAKERS = Left
;SPEAKERS = Right

[GAME_SETTING]
; Normal or Reverse
;SCREEN = Normal

; 1, 3, or 5.
;VS_ROUND = 3

; 100, 200, 300, ..., 900, 999.
;VS_LEVEL = 200

; Enable or disable playback of sounds during demonstrations.
;DEMO_SOUND = 0

; Same or Individual
;COIN_SLOT = Same

; Normal, Double, or Free Play.
; "Double" coin mode uses two credits to buy one game. It's supported in the original code, but TAP's original game setting screen doesn't offer it as an option.
; Double coin mode overrides price settings, and makes 1 coin buy 1 credit.
;COIN_MODE = Normal

; These are the game price settings.
; These must be 1 to 6 coins for 1 credit or 1 coin for 2 to 4 credits.
;COIN1 = 1 coin for 1 credit
;COIN2 = 1 coin for 1 credit

; Debug mode can only be enabled if coin mode is free play.
;DEBUG = 0
